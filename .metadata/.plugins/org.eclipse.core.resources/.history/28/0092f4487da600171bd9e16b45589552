package lolpatcher;

import java.awt.Font;
import java.awt.Point;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import nl.xupwup.Util.Color;
import nl.xupwup.Util.GLFramework;
import nl.xupwup.Util.ShaderProgram;
import nl.xupwup.Util.TextRenderer;
import nl.xupwup.Util.Texture;
import nl.xupwup.WindowManager.Component;
import nl.xupwup.WindowManager.Components.Button;
import nl.xupwup.WindowManager.Components.CheckBox;
import nl.xupwup.WindowManager.Components.Option;
import nl.xupwup.WindowManager.Components.SelectList;
import nl.xupwup.WindowManager.Components.TextField;
import nl.xupwup.WindowManager.Listener;
import nl.xupwup.WindowManager.Window;
import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.Display;

import static org.lwjgl.opengl.GL11.*;

/**
 *
 * @author Rick Hendricksen
 */
public class Main extends Thread {
    public static int patcherVersion;
    static{
        try(BufferedReader br = new BufferedReader(new InputStreamReader(GLFramework.class.getResourceAsStream("/version")))){
            patcherVersion = Integer.parseInt(br.readLine());
        }catch (IOException ex) {
            patcherVersion = Integer.MAX_VALUE;
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("Patcher version is " + patcherVersion);
    }
    public List<PatchTask> patchers;
    int currentPatcher = -1;
    PatchTask patcher;
    TextRenderer tr;
    TextRenderer smallText;
    public TextRenderer boldText;
    Flow flow;
    public String airversion;
    long patcherStartTime;
    boolean ignoreS_OK = false, force = false;
    Window repairWindow;
    boolean purgeAfterwards = false;
    boolean changeRegionSettings = false;
    float playw, playh, playx, playy, repairw;
    boolean autostart;
    
    public Main(){
        super();
        patchers = new ArrayList<>();
    }
    
    public void rerun(){
        patchers.clear();
        if(currentPatcher == -1){
            patchers.add(new SelfUpdateTask());
        }
        
        patchers.add(new ConfigurationTask(this));
        patcher = null;
        currentPatcher = -1;
    }


    public void post_glInit() {
        rerun();
    }

    private boolean updatePatcher(){
        if(patcher == null || patcher.done){
            if(patcher != null){
                try {
                    patcher.join();
                } catch (InterruptedException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if(currentPatcher == patchers.size()-1){
                return true;
            }
            currentPatcher++;
            patcher = patchers.get(currentPatcher);
            patcher.start();
            patcherStartTime = System.currentTimeMillis();
        }
        
        return false;
    }
    


    public void draw() {
        if(patcher != null){
            if(patcher.error != null){
                try {
                    java.io.File log = new java.io.File("PATCHLOG.txt");
                    log.createNewFile();
                    try(PrintWriter pw = new PrintWriter(log)){
                        patcher.error.printStackTrace(pw);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
                StringWriter sw = new StringWriter();
                try(PrintWriter pw = new PrintWriter(sw)){
                    patcher.error.printStackTrace(pw);
                }
                patcher.error = null;
                Window win = new Window(new Point(0, 200), "Error");
                win.addComponent(new TextField(1000, 200, sw.toString().replaceAll("[\r\t]", ""), null));
            }
            PatchTask lp = patcher;          
           
            if(lp instanceof LoLPatcher){
                LoLPatcher ptch = (LoLPatcher) lp;
                if(ptch.workers != null){
                    ArrayList<Worker> workers = new ArrayList<>(ptch.workers.length);
                    for(Worker worker : ptch.workers){
                        if(worker.startTime != -1){
                            workers.add(worker);
                        }
                    }
                }
            }
        }

        if(updatePatcher()){
            //System.out.println("done");
        }
    }
    
    @Override
    public void onClose() {
        if(!patchers.get(currentPatcher).done){
            patchers.get(currentPatcher).done = true;
            try {
                patchers.get(currentPatcher).join(2000);
            } catch (InterruptedException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        System.exit(0);
    }
    

    
    private boolean getAutoStart(){
        if(new File("settings.txt").exists()){
            try (FileReader fr = new FileReader("settings.txt")){
                Properties props = new Properties();
                props.load(fr);
                return Boolean.parseBoolean(props.getProperty("autostart"));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return false;
    }
    
    private void startGame(){
        try {
            Runtime.getRuntime().exec(new String[]{System.getProperty("java.home")+"/bin/java", "-jar", "Maestro.jar", new java.io.File("RADS/solutions/lol_game_client_sln/releases/").getAbsolutePath()});

            String exeLoc = new java.io.File("RADS/projects/lol_air_client/releases/"+airversion+"/deploy/LolClient.exe").getAbsolutePath();
            if(System.getProperty("os.name").equals("Linux")){
                Runtime.getRuntime().exec(new String[]{"wine", exeLoc});
            }else{
                Runtime.getRuntime().exec(new String[]{exeLoc});
            }
            System.exit(0);
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void run() {
        post_glInit();
        mainLoop();
    }
    
    private void mainLoop() {
        while (True) {
            draw();
        }
        onClose();
    }
    
    
    public static void main(String[] args){
        System.setProperty("org.lwjgl.librarypath", new File("lwjgllib").getAbsolutePath());
        try{
        	while(true){
        		new Main().run();
        	}
        }catch(Exception e){
            e.printStackTrace();
            try {
                java.io.File log = new java.io.File("GUILOG.txt");
                log.createNewFile();
                try(PrintWriter pw = new PrintWriter(log)){
                    e.printStackTrace(pw);
                }
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }
}
